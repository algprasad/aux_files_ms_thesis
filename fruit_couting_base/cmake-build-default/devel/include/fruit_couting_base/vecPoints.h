// Generated by gencpp from file fruit_couting_base/vecPoints.msg
// DO NOT EDIT!


#ifndef FRUIT_COUTING_BASE_MESSAGE_VECPOINTS_H
#define FRUIT_COUTING_BASE_MESSAGE_VECPOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace fruit_couting_base
{
template <class ContainerAllocator>
struct vecPoints_
{
  typedef vecPoints_<ContainerAllocator> Type;

  vecPoints_()
    : header()
    , camera_pose()
    , centres3d()
    , centres2d()  {
    }
  vecPoints_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , camera_pose(_alloc)
    , centres3d(_alloc)
    , centres2d(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _camera_pose_type;
  _camera_pose_type camera_pose;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _centres3d_type;
  _centres3d_type centres3d;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _centres2d_type;
  _centres2d_type centres2d;





  typedef boost::shared_ptr< ::fruit_couting_base::vecPoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fruit_couting_base::vecPoints_<ContainerAllocator> const> ConstPtr;

}; // struct vecPoints_

typedef ::fruit_couting_base::vecPoints_<std::allocator<void> > vecPoints;

typedef boost::shared_ptr< ::fruit_couting_base::vecPoints > vecPointsPtr;
typedef boost::shared_ptr< ::fruit_couting_base::vecPoints const> vecPointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fruit_couting_base::vecPoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fruit_couting_base::vecPoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::fruit_couting_base::vecPoints_<ContainerAllocator1> & lhs, const ::fruit_couting_base::vecPoints_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.camera_pose == rhs.camera_pose &&
    lhs.centres3d == rhs.centres3d &&
    lhs.centres2d == rhs.centres2d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::fruit_couting_base::vecPoints_<ContainerAllocator1> & lhs, const ::fruit_couting_base::vecPoints_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace fruit_couting_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fruit_couting_base::vecPoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fruit_couting_base::vecPoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fruit_couting_base::vecPoints_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "53552ab9226ff5fc524d3c626f4ca409";
  }

  static const char* value(const ::fruit_couting_base::vecPoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x53552ab9226ff5fcULL;
  static const uint64_t static_value2 = 0x524d3c626f4ca409ULL;
};

template<class ContainerAllocator>
struct DataType< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fruit_couting_base/vecPoints";
  }

  static const char* value(const ::fruit_couting_base::vecPoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"geometry_msgs/Pose camera_pose\n"
"geometry_msgs/Point[] centres3d\n"
"geometry_msgs/Point[] centres2d\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::fruit_couting_base::vecPoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.camera_pose);
      stream.next(m.centres3d);
      stream.next(m.centres2d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vecPoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fruit_couting_base::vecPoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fruit_couting_base::vecPoints_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "camera_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.camera_pose);
    s << indent << "centres3d[]" << std::endl;
    for (size_t i = 0; i < v.centres3d.size(); ++i)
    {
      s << indent << "  centres3d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.centres3d[i]);
    }
    s << indent << "centres2d[]" << std::endl;
    for (size_t i = 0; i < v.centres2d.size(); ++i)
    {
      s << indent << "  centres2d[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.centres2d[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRUIT_COUTING_BASE_MESSAGE_VECPOINTS_H
